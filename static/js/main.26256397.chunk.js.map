{"version":3,"sources":["Components/PageTabs.js","Components/NavBar.js","Container/Banner/Banner.js","App.js","serviceWorker.js","index.js"],"names":["PageTabs","state","value","handleChange","event","_this","setState","classes","this","props","react_default","a","createElement","index_es","className","root","onChange","indicatorColor","textColor","centered","label","React","Component","withStyles","gridColumn","marginTop","backgroundColor","fontSize","textTransform","NavBar","_Component","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","href","alt","src","Components_PageTabs","Banner","App","Components_NavBar","Banner_Banner","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister","theme","createMuiTheme","palette","primary","red","secondary","main","amber","A400","light","dark","spacing","unit","render","styles","src_App","document","getElementById"],"mappings":"iPAiBMA,6MACJC,MAAQ,CACNC,MAAO,KAGTC,aAAe,SAACC,EAAOF,GACrBG,EAAKC,SAAS,CAAEJ,mFAGT,IACCK,EAAYC,KAAKC,MAAjBF,QAER,OACEG,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,UAAWP,EAAQQ,MACxBL,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEX,MAAOM,KAAKP,MAAMC,MAClBc,SAAUR,KAAKL,aACfc,eAAe,UACfC,UAAU,UACVC,UAAQ,GAERT,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKO,MAAM,WAAWN,UAAWP,EAAQa,QACzCV,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKO,MAAM,eAAeN,UAAWP,EAAQa,QAC7CV,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKO,MAAM,UAAUN,UAAWP,EAAQa,QACxCV,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKO,MAAM,aAAaN,UAAWP,EAAQa,iBAxB9BC,IAAMC,WAmCdC,uBA/CA,CACbR,KAAM,CACJS,WAAY,MACZC,UAAW,OACXC,gBAAiB,WAEnBN,MAAO,CACLO,SAAU,SACVC,cAAe,eAuCJL,CAAmBvB,GCnBnB6B,EA7Bf,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAvB,KAAAqB,GAAAE,OAAAE,EAAA,EAAAF,CAAAvB,KAAAuB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,MAAA3B,KAAA4B,YAAA,OAAAL,OAAAM,EAAA,EAAAN,CAAAF,EAAAC,GAAAC,OAAAO,EAAA,EAAAP,CAAAF,EAAA,EAAAU,IAAA,SAAArC,MAAA,WAEI,OACEQ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACbJ,EAAAC,EAAAC,cAAA,KAAG4B,KAAK,kCACN9B,EAAAC,EAAAC,cAAA,OACE6B,IAAI,uBACJC,IAAI,+HAIVhC,EAAAC,EAAAC,cAAA,MAAIE,UAAU,sBACZJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sBAAf,kBACAJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sBAAf,cACAJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sBAAf,uBAEFJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,uBACZJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,6CAAf,WAGAJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,4CAAf,WAEFJ,EAAAC,EAAAC,cAAC+B,EAAD,WAvBRd,EAAA,CAA4BP,aCFPsB,mLAEjB,OAAOlC,EAAAC,EAAAC,cAAA,WAASE,UAAU,kBAFMQ,aCarBuB,mLATX,OACEnC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACkC,EAAD,MACApC,EAAAC,EAAAC,cAACmC,EAAD,cALUzB,qBCME0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kEAyGA,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,eC9GnB,IAAMC,EAAQC,yBAAe,CAC3BC,QAAS,CACPC,QAASC,MACTC,UAAW,CACTC,KAAMC,QAAMC,KACZC,MAAOF,QAAM,KACbG,KAAMH,QAAM,OAGhBI,QAAS,CACPC,KAAM,MAIVC,iBACE9D,EAAAC,EAAAC,cAAC6D,EAAA,iBAAD,CAAkBd,MAAOA,GACvBjD,EAAAC,EAAAC,cAAC8D,EAAD,OAEFC,SAASC,eAAe","file":"static/js/main.26256397.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { Tabs, Tab, Paper } from \"@material-ui/core\";\r\n\r\nconst styles = {\r\n  root: {\r\n    gridColumn: \"1/4\",\r\n    marginTop: \"0rem\",\r\n    backgroundColor: \"primary\"\r\n  },\r\n  label: {\r\n    fontSize: \"1.5rem\",\r\n    textTransform: \"capitalize\"\r\n  }\r\n};\r\n\r\nclass PageTabs extends React.Component {\r\n  state = {\r\n    value: 0\r\n  };\r\n\r\n  handleChange = (event, value) => {\r\n    this.setState({ value });\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n      <Paper className={classes.root}>\r\n        <Tabs\r\n          value={this.state.value}\r\n          onChange={this.handleChange}\r\n          indicatorColor=\"primary\"\r\n          textColor=\"primary\"\r\n          centered\r\n        >\r\n          <Tab label=\"Campaign\" className={classes.label} />\r\n          <Tab label=\"Team Members\" className={classes.label} />\r\n          <Tab label=\"Updates\" className={classes.label} />\r\n          <Tab label=\"Supporters\" className={classes.label} />\r\n        </Tabs>\r\n      </Paper>\r\n    );\r\n  }\r\n}\r\n\r\nPageTabs.propTypes = {\r\n  classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(PageTabs);\r\n","import React, { Component } from \"react\";\r\n\r\nimport PageTabs from \"./PageTabs\";\r\n\r\nexport class NavBar extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"header\">\r\n        <div className=\"header__logo\">\r\n          <a href=\"https://www.schwans-cares.com/\">\r\n            <img\r\n              alt=\"SCHWAN'S CARESâ„¢\"\r\n              src=\"https://d1zebr6xqllqk1.cloudfront.net/images/merchants/site_header_logos/000/000/015/original/Schwans-Cares_AllWhite.png\"\r\n            />\r\n          </a>\r\n        </div>\r\n        <ul className=\"header__left--list\">\r\n          <div className=\"header__left--item\">How To Support</div>\r\n          <div className=\"header__left--item\">Contact Us</div>\r\n          <div className=\"header__left--item\">$20 Referral Bonus</div>\r\n        </ul>\r\n        <ul className=\"header__right--list\">\r\n          <div className=\"header__right--item button button__signup\">\r\n            Sign Up\r\n          </div>\r\n          <div className=\"header__right--item button button__login\">Log In</div>\r\n        </ul>\r\n        <PageTabs />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Banner extends Component {\r\n  render() {\r\n    return <section className=\"banner\" />;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport NavBar from \"./Components/NavBar\";\nimport Banner from \"./Container/Banner/Banner\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <NavBar />\n        <Banner />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./App\";\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core\";\nimport { red, amber } from \"@material-ui/core/colors\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: red,\n    secondary: {\n      main: amber.A400,\n      light: amber[200],\n      dark: amber[700]\n    }\n  },\n  spacing: {\n    unit: 10\n  }\n});\n\nrender(\n  <MuiThemeProvider theme={theme}>\n    <App />\n  </MuiThemeProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}